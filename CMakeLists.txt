cmake_minimum_required(VERSION 3.0 FATAL_ERROR)
project(vulkan_render)

option(VR_BUILD_VULKAN_RENDER_TEST "Build Vulkan Render Test Program" ON)
option(VR_VULKAN_VALIDATION "Enable Vulkan Validation" OFF)
option(VR_BUILD_GLFW "Build GLFW" ON)

set(TARGET vulkan)
set(VR_VULKAN_PUBLIC_HDR_DIR  ${CMAKE_CURRENT_LIST_DIR}/3rd_party/vulkan/include)
set(VR_VULKAN_VMA_HDR ${CMAKE_CURRENT_LIST_DIR}/3rd_party/vma/src)

file(GLOB_RECURSE VR_VULKAN_PUBLIC_HDRS ${CMAKE_CURRENT_LIST_DIR}/vulkan/*.h ${CMAKE_CURRENT_LIST_DIR}/vulkan/*.hpp)
file(GLOB_RECURSE VR_VULKAN_SRCS ${CMAKE_CURRENT_LIST_DIR}/vulkan/*.cpp ${CMAKE_CURRENT_LIST_DIR}/vulkan/*.mm)
list(REMOVE_ITEM VR_VULKAN_SRCS ${CMAKE_CURRENT_LIST_DIR}/vulkan/test/test.cpp)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

add_library(${TARGET} STATIC ${VR_VULKAN_PUBLIC_HDRS} ${VR_VULKAN_SRCS})

target_include_directories(${TARGET} PUBLIC ${VR_VULKAN_VMA_HDR})
target_include_directories(${TARGET} PUBLIC ${CMAKE_CURRENT_LIST_DIR}/vulkan)
target_include_directories(${TARGET} PUBLIC ${VR_VULKAN_PUBLIC_HDR_DIR})

add_definitions(-DVR_VULKAN_USE_LIB_WRAPPER)

if(VR_VULKAN_VALIDATION)
    add_definitions(-DVR_VULKAN_VALIDATION)
endif()

if(ANDROID)
    target_compile_definitions(${TARGET} PRIVATE VK_USE_PLATFORM_ANDROID_KHR)
elseif(WIN32)
    target_compile_definitions(${TARGET} PRIVATE VK_USE_PLATFORM_WIN32_KHR)
elseif(APPLE)
    # target_compile_definitions(${TARGET} PRIVATE VK_USE_PLATFORM_METAL_EXT)
    target_compile_definitions(${TARGET} PRIVATE VK_USE_PLATFORM_MACOS_MVK)
# elseif(UNIX)
#     # Choose WSI based on VKB_WSI_SELECTION
#     if (VKB_WSI_SELECTION STREQUAL XCB OR VKB_WSI_SELECTION STREQUAL XLIB OR VKB_WSI_SELECTION STREQUAL WAYLAND)
#         find_package(PkgConfig REQUIRED)
#     endif()
#     if (VKB_WSI_SELECTION STREQUAL XCB)
#         pkg_check_modules(XCB xcb REQUIRED)
#         if (XCB_FOUND)
#             target_compile_definitions(vulkan INTERFACE VK_USE_PLATFORM_XCB_KHR)
#         endif()
#     elseif (VKB_WSI_SELECTION STREQUAL XLIB)
#         pkg_check_modules(X11 x11 REQUIRED)
#         if (X11_FOUND)
#             target_compile_definitions(vulkan INTERFACE VK_USE_PLATFORM_XLIB_KHR)
#         endif()
#     elseif (VKB_WSI_SELECTION STREQUAL WAYLAND)
#         pkg_check_modules(WAYLAND wayland-client REQUIRED)
#         if (WAYLAND_FOUND)
#             target_compile_definitions(vulkan INTERFACE VK_USE_PLATFORM_WAYLAND_KHR)
#         endif()
#     elseif (VKB_WSI_SELECTION STREQUAL D2D)
#         set(DIRECT_TO_DISPLAY TRUE)
#         set(DIRECT_TO_DISPLAY TRUE PARENT_SCOPE)
#         target_compile_definitions(vulkan INTERFACE VK_USE_PLATFORM_DISPLAY_KHR)
#     else()
#         message(FATAL_ERROR "Unknown WSI")
#     endif()    
else()
    message(FATAL_ERROR "Platform not supported. Only supports Windows, Android, IOS and MacOS")    
endif()

include_directories(${CMAKE_CURRENT_LIST_DIR})
include_directories(${CMAKE_CURRENT_LIST_DIR}/include)
include_directories(${CMAKE_CURRENT_LIST_DIR}/common)
include_directories(${CMAKE_CURRENT_LIST_DIR}/3rd_party/glfw/include)
include_directories(/usr/local/include/)

if (VR_BUILD_GLFW)
    set(GLFW_INSTALL OFF)
    link_directories(${CMAKE_BINARY_DIR}/glfw_lib/src)
    add_subdirectory(${CMAKE_CURRENT_LIST_DIR}/3rd_party/glfw glfw_lib)
endif()

if (VR_BUILD_VULKAN_RENDER_TEST)
    if (APPLE) 
        add_executable(vulkan_render_test RenderTest.mm)

        find_library(METAL Metal)
        find_library(QUARTZ Quartz)

        if (VR_BUILD_GLFW)
            target_link_libraries(vulkan_render_test PRIVATE ${TARGET} ${METAL} ${QUARTZ} dl glfw)
        else()
            target_link_libraries(vulkan_render_test PRIVATE ${TARGET} ${METAL} ${QUARTZ} dl)
        endif()
    endif()
endif()

# install(TARGETS ${TARGET} ARCHIVE DESTINATION lib/${DIST_DIR})
